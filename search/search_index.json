{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c! \u041d\u0430 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u0430\u0439\u0442\u0435 \u0432\u044b \u043d\u0430\u0439\u0434\u0435\u0442\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u043e\u0434\u0430 \u0438\u0437 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432. \u0427\u0430\u0441\u0442\u043e \u043f\u0435\u0440\u0435\u0434\u043e \u043c\u043d\u043e\u0439 \u0438 \u043c\u043e\u0438\u043c\u0438 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430\u043c\u0438 \u0441\u0442\u043e\u044f\u0442 \u043d\u0435 \u0442\u0440\u0438\u0432\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0443\u0436\u043d\u043e \u0440\u0435\u0448\u0438\u0442\u044c. \u041f\u043e \u043c\u0435\u0440\u0435 \u0441\u0432\u043e\u0435\u0433\u043e \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u044f \u0432\u044b\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u044e \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u043e\u0434\u0430 \u0441 \u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c \u044d\u0442\u0438\u0445 \u0437\u0430\u0434\u0430\u0447. \u0417\u0434\u0435\u0441\u044c \u0432\u044b \u043d\u0430\u0439\u0434\u0435\u0442\u0435 \u043a\u043e\u0434 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0439 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c: Python Django FastAPI Masonite Flask \u0438 \u0442.\u0434. \u0413\u0434\u0435 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0441 \u043d\u0430\u0439\u0442\u0438: \u0422\u0435\u043b\u0435\u0433\u0440\u0430\u043c \u043a\u0430\u043d\u0430\u043b \u0422\u0435\u043b\u0435\u0433\u0440\u0430\u043c \u0447\u0430\u0442 \u043f\u043e Django \u0422\u0435\u043b\u0435\u0433\u0440\u0430\u043c \u0447\u0430\u0442 \u043f\u043e FastAPI \u0422\u0435\u043b\u0435\u0433\u0440\u0430\u043c \u0447\u0430\u0442 \u043f\u043e Masonite YouTube","title":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f"},{"location":"#_1","text":"\u041d\u0430 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u0430\u0439\u0442\u0435 \u0432\u044b \u043d\u0430\u0439\u0434\u0435\u0442\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u043e\u0434\u0430 \u0438\u0437 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432. \u0427\u0430\u0441\u0442\u043e \u043f\u0435\u0440\u0435\u0434\u043e \u043c\u043d\u043e\u0439 \u0438 \u043c\u043e\u0438\u043c\u0438 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430\u043c\u0438 \u0441\u0442\u043e\u044f\u0442 \u043d\u0435 \u0442\u0440\u0438\u0432\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0443\u0436\u043d\u043e \u0440\u0435\u0448\u0438\u0442\u044c. \u041f\u043e \u043c\u0435\u0440\u0435 \u0441\u0432\u043e\u0435\u0433\u043e \u0441\u0432\u043e\u0431\u043e\u0434\u043d\u043e\u0433\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u044f \u0432\u044b\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u044e \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u043a\u043e\u0434\u0430 \u0441 \u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c \u044d\u0442\u0438\u0445 \u0437\u0430\u0434\u0430\u0447.","title":"\u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c!"},{"location":"#_2","text":"Python Django FastAPI Masonite Flask \u0438 \u0442.\u0434.","title":"\u0417\u0434\u0435\u0441\u044c \u0432\u044b \u043d\u0430\u0439\u0434\u0435\u0442\u0435 \u043a\u043e\u0434 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0439 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c:"},{"location":"#_3","text":"\u0422\u0435\u043b\u0435\u0433\u0440\u0430\u043c \u043a\u0430\u043d\u0430\u043b \u0422\u0435\u043b\u0435\u0433\u0440\u0430\u043c \u0447\u0430\u0442 \u043f\u043e Django \u0422\u0435\u043b\u0435\u0433\u0440\u0430\u043c \u0447\u0430\u0442 \u043f\u043e FastAPI \u0422\u0435\u043b\u0435\u0433\u0440\u0430\u043c \u0447\u0430\u0442 \u043f\u043e Masonite YouTube","title":"\u0413\u0434\u0435 \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0441 \u043d\u0430\u0439\u0442\u0438:"},{"location":"django/admin/custom_saving_inline/","text":"\u041a\u0430\u043a \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0444\u043e\u0440\u043c\u044b Django admin Inline? \u0418\u0434\u0435\u044f \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0430 \u0441\u0430\u0439\u0442\u0435 \u043c\u043e\u0436\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0438 \u0432\u0438\u0434\u0435\u0442\u044c \u0432\u0441\u044e \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u043a\u0443 \u0441 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u043e\u043c. \u041c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u0432\u0438\u0434\u0438\u0442 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u043a\u0443 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f Django \u0430\u0434\u043c\u0438\u043d\u043a\u0443. \u0414\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u043a\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043a\u043b\u0430\u0441\u0441 StackedInline . \u0417\u0430\u0434\u0430\u0447\u0430 \u041a\u043e\u0433\u0434\u0430 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0442\u043e \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c, \u0434\u043e\u043b\u0436\u0435\u043d \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u043e\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c\u0441\u044f \u043f\u0440\u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0438. \u0423 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u043d\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u043b \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435. \u041c\u043e\u0434\u0435\u043b\u0438 \u041f\u0435\u0440\u0435\u043f\u0438\u0441\u043a\u0430 \u0432\u0435\u0434\u0435\u0442\u0441\u044f \u0432 \u043d\u0435\u043a\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u0435. \u0415\u0441\u0442\u044c \u0434\u0432\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 Group \u0438 Message . \u041c\u043e\u0434\u0435\u043b\u044c Message \u0441\u0432\u044f\u0437\u0430\u043d\u0430 \u0441 Group . myapp/models.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from django.contrib.auth.models import User from django.db import models class Group ( models . Model ): name = models . CharField ( max_length = 100 ) create_at = models . DateTimeField ( auto_now_add = True ) def __str__ ( self ): return self . name class Message ( models . Model ): text = models . TextField () group = models . ForeignKey ( Group , on_delete = models . CASCADE , related_name = 'messages' ) user = models . ForeignKey ( User , on_delete = models . CASCADE ) \u0410\u0434\u043c\u0438\u043d\u043a\u0430 \u0412 \u0430\u0434\u043c\u0438\u043d\u043a\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c Group . \u0414\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432 \u0433\u0440\u0443\u043f\u043f\u0435, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043a\u043b\u0430\u0441\u0441 MessageInline \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443\u043a\u0430\u0437\u0430\u043d \u0432 \u043a\u043b\u0430\u0441\u0441\u0435 GroupAdmin \u043a\u043e\u0434: myapp/admin.py 1 2 3 4 5 6 7 8 9 10 11 12 13 from django.contrib import admin from .models import Group , Message class MessageInline ( admin . StackedInline ): model = Message extra = 1 @admin . register ( Group ) class GroupAdmin ( admin . ModelAdmin ): list_display = ( 'id' , 'name' ) inlines = [ MessageInline ] \u0412\u0438\u0434\u0438\u043c \u0447\u0442\u043e \u0443 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043e\u0442 \u0438\u043c\u0435\u043d\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435. \u041b\u0435\u0448\u0438\u043c \u0435\u0433\u043e \u0442\u0430\u043a\u043e\u0439 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438, \u0434\u043e\u0431\u0430\u0432\u0438\u0432 readonly_fields . myapp/admin.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from django.contrib import admin from .models import Group , Message class MessageInline ( admin . StackedInline ): model = Message extra = 1 readonly_fields = ( 'user' ,) @admin . register ( Group ) class GroupAdmin ( admin . ModelAdmin ): list_display = ( 'id' , 'name' ) inlines = [ MessageInline ] \u041d\u043e \u0442\u0435\u043f\u0435\u0440\u044c \u043f\u0440\u0438 \u043f\u043e\u043f\u044b\u0442\u043a\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c (\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c) \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u043e\u0448\u0438\u0431\u043a\u0443: IntegrityError NOT NULL constraint failed: myapp_message.user_id \u041c\u044b \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043b\u0438 \u043a \u043a\u0430\u043a\u043e\u043c\u0443 \u044e\u0437\u0435\u0440\u0443 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u0434\u0430\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0420\u0435\u0448\u0438\u043c \u0434\u0430\u043d\u043d\u0443\u044e \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443, \u043d\u0443\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043c\u0435\u0442\u043e\u0434 save_formset \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. myapp/admin.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 from django.contrib import admin from .models import Group , Message class MessageInline ( admin . StackedInline ): model = Message extra = 1 readonly_fields = ( 'user' ,) @admin . register ( Group ) class GroupAdmin ( admin . ModelAdmin ): list_display = ( 'id' , 'name' ) inlines = [ MessageInline ] def save_formset ( self , request , form , formset , change ): instances = formset . save ( commit = False ) for instance in instances : instance . user = request . user instance . save () formset . save_m2m () \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u041f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u0442\u0441\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430.","title":"\u041f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0444\u043e\u0440\u043c\u044b admin Inline"},{"location":"django/admin/custom_saving_inline/#django-admin-inline","text":"","title":"\u041a\u0430\u043a \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0444\u043e\u0440\u043c\u044b Django admin Inline?"},{"location":"django/admin/custom_saving_inline/#_1","text":"\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0430 \u0441\u0430\u0439\u0442\u0435 \u043c\u043e\u0436\u0435\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0438 \u0432\u0438\u0434\u0435\u0442\u044c \u0432\u0441\u044e \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u043a\u0443 \u0441 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u043e\u043c. \u041c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u0432\u0438\u0434\u0438\u0442 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u043a\u0443 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f Django \u0430\u0434\u043c\u0438\u043d\u043a\u0443. \u0414\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u043a\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043a\u043b\u0430\u0441\u0441 StackedInline .","title":"\u0418\u0434\u0435\u044f"},{"location":"django/admin/custom_saving_inline/#_2","text":"\u041a\u043e\u0433\u0434\u0430 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0442\u043e \u0442\u0435\u043a\u0443\u0449\u0438\u0439 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c, \u0434\u043e\u043b\u0436\u0435\u043d \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u043e\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u044c\u0441\u044f \u043f\u0440\u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0438. \u0423 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u043d\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u043b \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435.","title":"\u0417\u0430\u0434\u0430\u0447\u0430"},{"location":"django/admin/custom_saving_inline/#_3","text":"\u041f\u0435\u0440\u0435\u043f\u0438\u0441\u043a\u0430 \u0432\u0435\u0434\u0435\u0442\u0441\u044f \u0432 \u043d\u0435\u043a\u043e\u0439 \u0433\u0440\u0443\u043f\u043f\u0435. \u0415\u0441\u0442\u044c \u0434\u0432\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 Group \u0438 Message . \u041c\u043e\u0434\u0435\u043b\u044c Message \u0441\u0432\u044f\u0437\u0430\u043d\u0430 \u0441 Group . myapp/models.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 from django.contrib.auth.models import User from django.db import models class Group ( models . Model ): name = models . CharField ( max_length = 100 ) create_at = models . DateTimeField ( auto_now_add = True ) def __str__ ( self ): return self . name class Message ( models . Model ): text = models . TextField () group = models . ForeignKey ( Group , on_delete = models . CASCADE , related_name = 'messages' ) user = models . ForeignKey ( User , on_delete = models . CASCADE )","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"django/admin/custom_saving_inline/#_4","text":"\u0412 \u0430\u0434\u043c\u0438\u043d\u043a\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c Group . \u0414\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0432 \u0433\u0440\u0443\u043f\u043f\u0435, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043a\u043b\u0430\u0441\u0441 MessageInline \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443\u043a\u0430\u0437\u0430\u043d \u0432 \u043a\u043b\u0430\u0441\u0441\u0435 GroupAdmin \u043a\u043e\u0434: myapp/admin.py 1 2 3 4 5 6 7 8 9 10 11 12 13 from django.contrib import admin from .models import Group , Message class MessageInline ( admin . StackedInline ): model = Message extra = 1 @admin . register ( Group ) class GroupAdmin ( admin . ModelAdmin ): list_display = ( 'id' , 'name' ) inlines = [ MessageInline ] \u0412\u0438\u0434\u0438\u043c \u0447\u0442\u043e \u0443 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043e\u0442 \u0438\u043c\u0435\u043d\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435. \u041b\u0435\u0448\u0438\u043c \u0435\u0433\u043e \u0442\u0430\u043a\u043e\u0439 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438, \u0434\u043e\u0431\u0430\u0432\u0438\u0432 readonly_fields . myapp/admin.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from django.contrib import admin from .models import Group , Message class MessageInline ( admin . StackedInline ): model = Message extra = 1 readonly_fields = ( 'user' ,) @admin . register ( Group ) class GroupAdmin ( admin . ModelAdmin ): list_display = ( 'id' , 'name' ) inlines = [ MessageInline ] \u041d\u043e \u0442\u0435\u043f\u0435\u0440\u044c \u043f\u0440\u0438 \u043f\u043e\u043f\u044b\u0442\u043a\u0435 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c (\u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u044c) \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u043e\u0448\u0438\u0431\u043a\u0443: IntegrityError NOT NULL constraint failed: myapp_message.user_id \u041c\u044b \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043b\u0438 \u043a \u043a\u0430\u043a\u043e\u043c\u0443 \u044e\u0437\u0435\u0440\u0443 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u0434\u0430\u043d\u043d\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435.","title":"\u0410\u0434\u043c\u0438\u043d\u043a\u0430"},{"location":"django/admin/custom_saving_inline/#_5","text":"\u0420\u0435\u0448\u0438\u043c \u0434\u0430\u043d\u043d\u0443\u044e \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0443, \u043d\u0443\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043c\u0435\u0442\u043e\u0434 save_formset \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. myapp/admin.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 from django.contrib import admin from .models import Group , Message class MessageInline ( admin . StackedInline ): model = Message extra = 1 readonly_fields = ( 'user' ,) @admin . register ( Group ) class GroupAdmin ( admin . ModelAdmin ): list_display = ( 'id' , 'name' ) inlines = [ MessageInline ] def save_formset ( self , request , form , formset , change ): instances = formset . save ( commit = False ) for instance in instances : instance . user = request . user instance . save () formset . save_m2m () \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u041f\u0440\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u0442\u0441\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430.","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"django/files/make_thumbnail/","text":"\u041a\u0430\u043a \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u043c\u0430\u043d\u0438\u043f\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u044b\u043c\u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u043c\u0438 \u043f\u0435\u0440\u0435\u0434 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0432 Django \u0418\u0434\u0435\u044f \u0418\u043d\u043e\u0433\u0434\u0430 \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u043c\u0438 \u043f\u0435\u0440\u0435\u0434 \u0438\u0445 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0432 Django. \u042d\u0442\u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u043e\u0431\u0440\u0435\u0437\u043a\u0443 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439, \u043f\u043e\u0432\u043e\u0440\u043e\u0442, \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u044d\u0441\u043a\u0438\u0437\u043e\u0432 \u0438\u043b\u0438 \u0441\u0436\u0430\u0442\u0438\u0435. \u0417\u0430\u0434\u0430\u0447\u0430 \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043c\u0438\u043d\u0438\u0430\u0442\u044e\u0440\u0443 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u043b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u041d\u0430\u043c \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u0441\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 Pillow. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043c \u0435\u0451. pip install Pillow \u041c\u043e\u0434\u0435\u043b\u044c \u041d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u0434\u0432\u0443\u043c\u044f \u043f\u043e\u043b\u044f\u043c\u0438 \u2014 image \u0438 thumbnail . \u0412 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u0443\u0434\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0438 \u043c\u0438\u043d\u0438\u0430\u0442\u044e\u0440\u0430. myapp/models.py 1 2 3 4 5 6 from django.db import models class Image ( models . Model ): image = models . ImageField () thumbnail = models . ImageField () \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u0438\u043d\u0438\u0430\u0442\u044e\u0440 \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e make_thumbnail() , \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043c\u0438\u043d\u0438\u0430\u0442\u044e\u0440\u044b \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f. \u042d\u0442\u0443 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u0444\u0430\u0439\u043b\u0435 models.py \u0438\u043b\u0438 \u0432 \u0432\u0430\u0448\u0435\u043c \u0441\u0435\u0440\u0432\u0438\u0441\u0435. \u042f \u0441\u043e\u0437\u0434\u0430\u043c \u0444\u0430\u0439\u043b services.py . myapp/services.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from io import BytesIO from django.core.files import File from PIL import Image def make_thumbnail ( image , size = ( 100 , 100 )): \"\"\"\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u043c\u0438\u043d\u0438\u0430\u0442\u044e\u0440\u044b \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430\"\"\" im = Image . open ( image ) im . convert ( 'RGB' ) im . thumbnail ( size ) thumb_io = BytesIO () im . save ( thumb_io , 'JPEG' , quality = 85 ) thumbnail = File ( thumb_io , name = image . name ) return thumbnail \u041f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u044f \u043a \u043a\u043e\u0434\u0443: im.convert(RGB) - \u0441\u043b\u0443\u0436\u0438\u0442 \u0434\u043b\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0440\u0435\u0436\u0438\u043c\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0432 RGB. \u041f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u0438\u043d\u043e\u0433\u0434\u0430 Pillow \u0432\u044b\u0434\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0443, \u043a\u043e\u0433\u0434\u0430 \u043c\u044b \u043f\u044b\u0442\u0430\u0435\u043c\u0441\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 JPEG, \u0435\u0441\u043b\u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 GIF \u0441 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u043e\u0439 \u043f\u0430\u043b\u0438\u0442\u0440\u043e\u0439. im.thumbnail(size) - \u044d\u0442\u043e \u043c\u0435\u0442\u043e\u0434 \u043a\u043b\u0430\u0441\u0441\u0430 Image, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u0442 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0434\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u044f \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0441\u0442\u043e\u0440\u043e\u043d. thumbnail = File(thumb_io, name=image.name) - \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043f\u043e\u043d\u044f\u0442\u043d\u044b\u0439 \u0434\u043b\u044f Django \u043e\u0431\u044a\u0435\u043a\u0442 File, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 Image . \u0412\u044b\u0437\u043e\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438\u0437 \u043c\u043e\u0434\u0435\u043b\u0438 \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0432 \u043c\u0435\u0442\u043e\u0434\u0435 save() \u043d\u0430\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u043c\u0438\u043d\u0438\u0430\u0442\u044e\u0440\u0443 \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u043c \u043f\u043e\u043b\u044e thumbnail . myapp/models.py 1 2 3 4 5 6 7 8 9 from services import make_thumbnail class Image ( models . Model ): image = models . ImageField () thumbnail = models . ImageField () def save ( self , * args , ** kwargs ): self . thumbnail = make_thumbnail ( self . image , size = ( 100 , 100 )) super () . save ( * args , ** kwargs ) \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0430\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u044d\u0442\u043e\u0442 \u043a\u043e\u0434, \u0447\u0442\u043e\u0431\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043b\u044e\u0431\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u043c\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043e\u0431\u0440\u0435\u0437\u0430\u0442\u044c \u0438\u0445.","title":"\u0420\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0435\u0434 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c"},{"location":"django/files/make_thumbnail/#django","text":"","title":"\u041a\u0430\u043a \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u043c\u0430\u043d\u0438\u043f\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u044b\u043c\u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u043c\u0438 \u043f\u0435\u0440\u0435\u0434 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0432 Django"},{"location":"django/files/make_thumbnail/#_1","text":"\u0418\u043d\u043e\u0433\u0434\u0430 \u043d\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441 \u0437\u0430\u0433\u0440\u0443\u0436\u0435\u043d\u043d\u044b\u043c\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u043c\u0438 \u043f\u0435\u0440\u0435\u0434 \u0438\u0445 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0432 Django. \u042d\u0442\u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u043e\u0431\u0440\u0435\u0437\u043a\u0443 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0439, \u043f\u043e\u0432\u043e\u0440\u043e\u0442, \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u044d\u0441\u043a\u0438\u0437\u043e\u0432 \u0438\u043b\u0438 \u0441\u0436\u0430\u0442\u0438\u0435.","title":"\u0418\u0434\u0435\u044f"},{"location":"django/files/make_thumbnail/#_2","text":"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043c\u0438\u043d\u0438\u0430\u0442\u044e\u0440\u0443 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u043b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c.","title":"\u0417\u0430\u0434\u0430\u0447\u0430"},{"location":"django/files/make_thumbnail/#_3","text":"\u041d\u0430\u043c \u043f\u043e\u043d\u0430\u0434\u043e\u0431\u0438\u0442\u0441\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 Pillow. \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u043c \u0435\u0451. pip install Pillow","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"django/files/make_thumbnail/#_4","text":"\u041d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d \u043f\u0440\u0438\u043c\u0435\u0440 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u0434\u0432\u0443\u043c\u044f \u043f\u043e\u043b\u044f\u043c\u0438 \u2014 image \u0438 thumbnail . \u0412 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u0443\u0434\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u044c\u0441\u044f \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0435 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0438 \u043c\u0438\u043d\u0438\u0430\u0442\u044e\u0440\u0430. myapp/models.py 1 2 3 4 5 6 from django.db import models class Image ( models . Model ): image = models . ImageField () thumbnail = models . ImageField ()","title":"\u041c\u043e\u0434\u0435\u043b\u044c"},{"location":"django/files/make_thumbnail/#_5","text":"\u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u043d\u043e\u0432\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e make_thumbnail() , \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u043c\u0438\u043d\u0438\u0430\u0442\u044e\u0440\u044b \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f. \u042d\u0442\u0443 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u0444\u0430\u0439\u043b\u0435 models.py \u0438\u043b\u0438 \u0432 \u0432\u0430\u0448\u0435\u043c \u0441\u0435\u0440\u0432\u0438\u0441\u0435. \u042f \u0441\u043e\u0437\u0434\u0430\u043c \u0444\u0430\u0439\u043b services.py . myapp/services.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from io import BytesIO from django.core.files import File from PIL import Image def make_thumbnail ( image , size = ( 100 , 100 )): \"\"\"\u0421\u043e\u0437\u0434\u0430\u0435\u0442 \u043c\u0438\u043d\u0438\u0430\u0442\u044e\u0440\u044b \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430\"\"\" im = Image . open ( image ) im . convert ( 'RGB' ) im . thumbnail ( size ) thumb_io = BytesIO () im . save ( thumb_io , 'JPEG' , quality = 85 ) thumbnail = File ( thumb_io , name = image . name ) return thumbnail \u041f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u044f \u043a \u043a\u043e\u0434\u0443: im.convert(RGB) - \u0441\u043b\u0443\u0436\u0438\u0442 \u0434\u043b\u044f \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0440\u0435\u0436\u0438\u043c\u0430 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0432 RGB. \u041f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u0438\u043d\u043e\u0433\u0434\u0430 Pillow \u0432\u044b\u0434\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0443, \u043a\u043e\u0433\u0434\u0430 \u043c\u044b \u043f\u044b\u0442\u0430\u0435\u043c\u0441\u044f \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 JPEG, \u0435\u0441\u043b\u0438 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 GIF \u0441 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u043e\u0439 \u043f\u0430\u043b\u0438\u0442\u0440\u043e\u0439. im.thumbnail(size) - \u044d\u0442\u043e \u043c\u0435\u0442\u043e\u0434 \u043a\u043b\u0430\u0441\u0441\u0430 Image, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u0430\u0441\u0448\u0442\u0430\u0431\u0438\u0440\u0443\u0435\u0442 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0434\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u043c\u0435\u0440\u0430, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u044f \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0441\u0442\u043e\u0440\u043e\u043d. thumbnail = File(thumb_io, name=image.name) - \u0441\u043e\u0437\u0434\u0430\u0435\u0442 \u043f\u043e\u043d\u044f\u0442\u043d\u044b\u0439 \u0434\u043b\u044f Django \u043e\u0431\u044a\u0435\u043a\u0442 File, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 Image .","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u0438\u043d\u0438\u0430\u0442\u044e\u0440"},{"location":"django/files/make_thumbnail/#_6","text":"\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0432 \u043c\u0435\u0442\u043e\u0434\u0435 save() \u043d\u0430\u0448\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438. \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u0443\u044e \u043c\u0438\u043d\u0438\u0430\u0442\u044e\u0440\u0443 \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u043c \u043f\u043e\u043b\u044e thumbnail . myapp/models.py 1 2 3 4 5 6 7 8 9 from services import make_thumbnail class Image ( models . Model ): image = models . ImageField () thumbnail = models . ImageField () def save ( self , * args , ** kwargs ): self . thumbnail = make_thumbnail ( self . image , size = ( 100 , 100 )) super () . save ( * args , ** kwargs ) \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0430\u0434\u0430\u043f\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0438 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u044d\u0442\u043e\u0442 \u043a\u043e\u0434, \u0447\u0442\u043e\u0431\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043b\u044e\u0431\u044b\u0435 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u0441 \u0438\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u043c\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043e\u0431\u0440\u0435\u0437\u0430\u0442\u044c \u0438\u0445.","title":"\u0412\u044b\u0437\u043e\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438\u0437 \u043c\u043e\u0434\u0435\u043b\u0438"},{"location":"django_rest_framework/orm/select_related/","text":"\u041a\u0430\u043a \u0441\u043e\u043a\u0440\u0430\u0442\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0431\u0430\u0437\u0443 \u043f\u0440\u0438 \u0441\u0432\u044f\u0437\u0438 Foreign Key \u0432 Django \u0418\u0434\u0435\u044f \u041d\u0443\u0436\u043d\u043e \u0437\u0430\u0431\u0440\u0430\u0442\u044c \u0438\u0437 \u0411\u0414 \u0432\u0441\u0435 \u0442\u043e\u0432\u0430\u0440\u044b \u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u0442\u043e\u0432\u0430\u0440\u044b. \u0417\u0430\u0434\u0430\u0447\u0430 \u0421\u043e\u043a\u0440\u0430\u0442\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0442\u0430\u0431\u043b\u0438\u0446. \u0415\u0441\u0442\u044c \u0434\u0432\u0435 \u043c\u043e\u0434\u0435\u043b\u0438, \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0438 \u0442\u043e\u0432\u0430\u0440\u044b. \u0422\u043e\u0432\u0430\u0440\u044b \u0441\u0432\u044f\u0437\u0430\u043d\u044b \u0441 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c\u0438 Foreign Key. myapp/models.py 1 2 3 4 5 6 7 8 9 10 11 12 from django.db import models class Category ( models . Model ): name = models . CharField ( max_length = 20 ) class Product ( models . Model ): title = models . CharField ( max_length = 50 ) description = models . TextField () price = models . DecimalField ( max_digits = 6 , decimal_places = 2 ) category = models . ForeignKey ( Category , on_delete = models . CASCADE ) \u041f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043c \u0447\u0442\u043e \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 10 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439 \u0438 10 \u0442\u043e\u0432\u0430\u0440\u043e\u0432. \u041f\u0440\u0438 \u0432\u044b\u0432\u043e\u0434\u0435 \u0442\u043e\u0432\u0430\u0440\u043e\u0432 \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c id \u0438 name \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0432 serializer \u0442\u043e\u0432\u0430\u0440\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d serializer \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438. myapp/serializers.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from rest_framework import serializers from .models import Category , Product class CategorySerializer ( serializers . ModelSerializer ): class Meta : model = Category fields = '__all__' class ProductSerializer ( serializers . ModelSerializer ): category = CategorySerializer () class Meta : model = Product fields = '__all__' \u0418\u0437 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0432\u0441\u0435 \u0442\u043e\u0432\u0430\u0440\u044b. myapp/views.py 1 2 3 4 5 6 7 8 9 from rest_framework import viewsets from .models import Product from .serializers import ProductSerializer class ProductView ( viewsets . ReadOnlyModelViewSet ): queryset = Product . objects . all () serializer_class = ProductSerializer \u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430 \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c\u0441\u044f 11 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u041e\u0434\u0438\u043d \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0437\u0430\u0431\u0440\u0430\u0442\u044c \u0432\u0441\u0435 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u044b \u0438 \u0435\u0449\u0435 10 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438. \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432, \u0442\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0411\u0414. \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0442\u043e\u0432\u0430\u0440\u043e\u0432 \u0441\u0442\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. SQL \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430. SELECT \"shop_category\" . \"id\" , \"shop_category\" . \"name\" FROM \"shop_category\" WHERE \"shop_category\" . \"id\" = 1 SELECT \"shop_category\" . \"id\" , \"shop_category\" . \"name\" FROM \"shop_category\" WHERE \"shop_category\" . \"id\" = 2 ... SELECT \"shop_category\" . \"id\" , \"shop_category\" . \"name\" FROM \"shop_category\" WHERE \"shop_category\" . \"id\" = 10 \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043c\u0435\u0442\u043e\u0434\u043e\u043c select_related \u0443\u043a\u0430\u0437\u0430\u0432 \u043c\u043e\u0434\u0435\u043b\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439. \u0412 \u0442\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 django orm \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c JOINs \u043d\u0443\u0436\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b. \u0412\u0441\u0435 \u043d\u0443\u0436\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0442\u0430\u0431\u043b\u0438\u0446 \u043f\u043e\u0434\u0442\u044f\u043d\u0443\u0442\u044c\u0441\u044f \u0441\u0440\u0430\u0437\u0443. \u0412 \u0431\u0430\u0437\u0443 \u0431\u0443\u0434\u0435\u0442 \u0441\u0434\u0435\u043b\u0430\u043d \u043e\u0434\u0438\u043d \u0437\u0430\u043f\u0440\u043e\u0441. myapp/views.py 1 2 3 4 5 6 7 8 9 from rest_framework import viewsets from .models import Product from .serializers import ProductSerializer class ProductView ( viewsets . ReadOnlyModelViewSet ): queryset = Product . objects . select_related ( 'category' ) . all () serializer_class = ProductSerializer \u0412 SQL \u0442\u0435\u043f\u0435\u0440\u044c \u044f\u0432\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u043d JOIN \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439. SELECT \"shop_product\" . \"id\" , \"shop_product\" . \"title\" , \"shop_product\" . \"description\" , \"shop_product\" . \"price\" , \"shop_product\" . \"category_id\" , \"shop_category\" . \"id\" , \"shop_category\" . \"name\" FROM \"shop_product\" INNER JOIN \"shop_category\" ON ( \"shop_product\" . \"category_id\" = \"shop_category\" . \"id\" ) select_related \u0427\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0442\u0430\u0431\u043b\u0438\u0446 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u0435\u0442\u043e\u0434 select_related , \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438, \u0442\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0443\u0436\u043d\u043e \u0434\u0436\u043e\u0439\u043d\u0438\u0442\u044c.","title":"\u0421\u043e\u043a\u0440\u0430\u0442\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0411\u0414 (Foreign Key)"},{"location":"django_rest_framework/orm/select_related/#foreign-key-django","text":"","title":"\u041a\u0430\u043a \u0441\u043e\u043a\u0440\u0430\u0442\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0431\u0430\u0437\u0443 \u043f\u0440\u0438 \u0441\u0432\u044f\u0437\u0438 Foreign Key \u0432 Django"},{"location":"django_rest_framework/orm/select_related/#_1","text":"\u041d\u0443\u0436\u043d\u043e \u0437\u0430\u0431\u0440\u0430\u0442\u044c \u0438\u0437 \u0411\u0414 \u0432\u0441\u0435 \u0442\u043e\u0432\u0430\u0440\u044b \u0438 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u0441\u044b\u043b\u0430\u044e\u0442\u0441\u044f \u0442\u043e\u0432\u0430\u0440\u044b.","title":"\u0418\u0434\u0435\u044f"},{"location":"django_rest_framework/orm/select_related/#_2","text":"\u0421\u043e\u043a\u0440\u0430\u0442\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0442\u0430\u0431\u043b\u0438\u0446. \u0415\u0441\u0442\u044c \u0434\u0432\u0435 \u043c\u043e\u0434\u0435\u043b\u0438, \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0438 \u0442\u043e\u0432\u0430\u0440\u044b. \u0422\u043e\u0432\u0430\u0440\u044b \u0441\u0432\u044f\u0437\u0430\u043d\u044b \u0441 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043c\u0438 Foreign Key. myapp/models.py 1 2 3 4 5 6 7 8 9 10 11 12 from django.db import models class Category ( models . Model ): name = models . CharField ( max_length = 20 ) class Product ( models . Model ): title = models . CharField ( max_length = 50 ) description = models . TextField () price = models . DecimalField ( max_digits = 6 , decimal_places = 2 ) category = models . ForeignKey ( Category , on_delete = models . CASCADE ) \u041f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u043c \u0447\u0442\u043e \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 10 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439 \u0438 10 \u0442\u043e\u0432\u0430\u0440\u043e\u0432. \u041f\u0440\u0438 \u0432\u044b\u0432\u043e\u0434\u0435 \u0442\u043e\u0432\u0430\u0440\u043e\u0432 \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c id \u0438 name \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438. \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u0432 serializer \u0442\u043e\u0432\u0430\u0440\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d serializer \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438. myapp/serializers.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 from rest_framework import serializers from .models import Category , Product class CategorySerializer ( serializers . ModelSerializer ): class Meta : model = Category fields = '__all__' class ProductSerializer ( serializers . ModelSerializer ): category = CategorySerializer () class Meta : model = Product fields = '__all__' \u0418\u0437 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0432\u0441\u0435 \u0442\u043e\u0432\u0430\u0440\u044b. myapp/views.py 1 2 3 4 5 6 7 8 9 from rest_framework import viewsets from .models import Product from .serializers import ProductSerializer class ProductView ( viewsets . ReadOnlyModelViewSet ): queryset = Product . objects . all () serializer_class = ProductSerializer","title":"\u0417\u0430\u0434\u0430\u0447\u0430"},{"location":"django_rest_framework/orm/select_related/#_3","text":"\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c\u0441\u044f 11 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u041e\u0434\u0438\u043d \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u0437\u0430\u0431\u0440\u0430\u0442\u044c \u0432\u0441\u0435 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u044b \u0438 \u0435\u0449\u0435 10 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438. \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u043f\u0438\u0441\u0435\u0439 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u043e\u0432, \u0442\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0432 \u0411\u0414. \u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0442\u043e\u0432\u0430\u0440\u043e\u0432 \u0441\u0442\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. SQL \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0440\u043e\u0434\u0443\u043a\u0442\u0430. SELECT \"shop_category\" . \"id\" , \"shop_category\" . \"name\" FROM \"shop_category\" WHERE \"shop_category\" . \"id\" = 1 SELECT \"shop_category\" . \"id\" , \"shop_category\" . \"name\" FROM \"shop_category\" WHERE \"shop_category\" . \"id\" = 2 ... SELECT \"shop_category\" . \"id\" , \"shop_category\" . \"name\" FROM \"shop_category\" WHERE \"shop_category\" . \"id\" = 10","title":"\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u0430"},{"location":"django_rest_framework/orm/select_related/#_4","text":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c \u043c\u0435\u0442\u043e\u0434\u043e\u043c select_related \u0443\u043a\u0430\u0437\u0430\u0432 \u043c\u043e\u0434\u0435\u043b\u044c \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439. \u0412 \u0442\u0430\u043a\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 django orm \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c JOINs \u043d\u0443\u0436\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u044b. \u0412\u0441\u0435 \u043d\u0443\u0436\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0442\u0430\u0431\u043b\u0438\u0446 \u043f\u043e\u0434\u0442\u044f\u043d\u0443\u0442\u044c\u0441\u044f \u0441\u0440\u0430\u0437\u0443. \u0412 \u0431\u0430\u0437\u0443 \u0431\u0443\u0434\u0435\u0442 \u0441\u0434\u0435\u043b\u0430\u043d \u043e\u0434\u0438\u043d \u0437\u0430\u043f\u0440\u043e\u0441. myapp/views.py 1 2 3 4 5 6 7 8 9 from rest_framework import viewsets from .models import Product from .serializers import ProductSerializer class ProductView ( viewsets . ReadOnlyModelViewSet ): queryset = Product . objects . select_related ( 'category' ) . all () serializer_class = ProductSerializer \u0412 SQL \u0442\u0435\u043f\u0435\u0440\u044c \u044f\u0432\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u043d JOIN \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0439. SELECT \"shop_product\" . \"id\" , \"shop_product\" . \"title\" , \"shop_product\" . \"description\" , \"shop_product\" . \"price\" , \"shop_product\" . \"category_id\" , \"shop_category\" . \"id\" , \"shop_category\" . \"name\" FROM \"shop_product\" INNER JOIN \"shop_category\" ON ( \"shop_product\" . \"category_id\" = \"shop_category\" . \"id\" ) select_related \u0427\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0442\u0430\u0431\u043b\u0438\u0446 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u0435\u0442\u043e\u0434 select_related , \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438, \u0442\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0443\u0436\u043d\u043e \u0434\u0436\u043e\u0439\u043d\u0438\u0442\u044c.","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"ecommerce_my_steam/games_db/","text":"","title":"Games db"},{"location":"fastapi/depends/permissions/","text":"\u041a\u0430\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c permissions \u0432 FastAPI \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0432 Depends \u0418\u0434\u0435\u044f \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u043f\u0440\u0430\u0432 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e url. \u0414\u0430\u043d\u043d\u044b\u0435 \u043e \u043f\u0440\u0430\u0432\u0430\u0445 \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u0432 \u0411\u0414. \u0417\u0430\u0434\u0430\u0447\u0430 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f Depends FastAPI \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c permissions, \u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0430\u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 orm \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c SqlAlchemy. \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0423 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0430\u0432. \u041a \u043f\u0440\u0438\u043c\u0435\u0440\u0443 \u043d\u0430 \u0447\u0442\u0435\u043d\u0438\u0435 \u0438 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435. Note \u041a\u043e\u0434 \u0432\u0441\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043d\u0435 \u0431\u0443\u0434\u0443 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442\u044c, \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0447\u0430\u0441\u0442\u0435\u0439 \u0434\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438. \u041c\u043e\u0434\u0435\u043b\u0438 \u041e\u043f\u0438\u0448\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u0438 Permission \u0438 User , \u0430 \u0442\u0430\u043a\u0436\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0434\u043b\u044f \u0441\u0432\u044f\u0437\u0438 m2m . myapp/models.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 from sqlalchemy import Column , String , Integer , Boolean , Table , ForeignKey from sqlalchemy.orm import relationship , backref from myapp.db.session import Base class Permission ( Base ): __tablename__ = \"permissions\" id = Column ( Integer , primary_key = True , index = True , unique = True ) name = Column ( String ) code_name = Column ( Integer ) users_permissions = Table ( 'users_permissions' , Base . metadata , Column ( 'id' , Integer , primary_key = True , unique = True ), Column ( 'user_id' , Integer , ForeignKey ( 'users.id' )), Column ( 'permission_id' , Integer , ForeignKey ( 'permissions.id' )) ) class User ( Base ): __tablename__ = \"users\" id = Column ( Integer , primary_key = True , index = True , unique = True ) username = Column ( String , unique = True ) email = Column ( String , unique = True ) password = Column ( String ) is_active = Column ( Boolean , default = False ) is_superuser = Column ( Boolean , default = False ) permissions = relationship ( \"Permission\" , secondary = users_permissions , backref = backref ( 'users_permissions' , lazy = \"dynamic\" ) ) \u0423 \u043a\u0430\u0436\u0434\u043e\u0433\u043e permission \u0435\u0441\u0442\u044c \u0438\u043c\u044f \u0438 \u043a\u043e\u0434. \u041f\u043e \u043a\u043e\u0434\u0443 \u0431\u0443\u0434\u0435\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u043f\u0440\u0430\u0432\u0430 \u044e\u0437\u0435\u0440\u0430. \u0421\u0432\u044f\u0437\u044c \u043c\u0435\u0436\u0434\u0443 User \u0438 Permission \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u044b users_permissions . Pydantic model myapp/schemas.py 1 2 3 4 5 6 7 8 9 10 11 from pydantic import BaseModel class User ( BaseModel ): id : int username : str email : str class TokenPayload ( BaseModel ): user_id : int \u0422\u0443\u0442 \u043d\u0438\u0447\u0435\u0433\u043e \u0441\u043b\u043e\u0436\u043d\u043e\u0433\u043e. \u041d\u0430\u0448\u0438 pydantic \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u044e\u0437\u0435\u0440\u0430 \u0438 \u0442\u043e\u043a\u0435\u043d\u0430. Depends permission myapp/permissions.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 import jwt from fastapi.security import OAuth2PasswordBearer from fastapi import Depends , HTTPException , Security from starlette.status import HTTP_403_FORBIDDEN from myapp.user import models , crud , schemas SECRET_KEY = \"udfsdu6%$&(*Y9dHG(&ytdf987gFST*Sg897\" ALGORITHM = \"HS256\" reusable_oauth2 = OAuth2PasswordBearer ( tokenUrl = \"/api/v1/login/access-token\" ) def get_current_user ( token : str = Security ( reusable_oauth2 )): try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) token_data = schemas . TokenPayload ( ** payload ) except jwt . PyJWTError : raise HTTPException ( status_code = HTTP_403_FORBIDDEN , detail = \"Could not validate credentials\" ) if user := crud . user . get ( id = token_data . user_id ): raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return user class PermissionsRouter : def __init__ ( self , permissions : tuple ): self . permissions = permissions def check_access ( self , current_user : models . User ): for permission in current_user . permissions : if permission . code_name in self . permissions : return current_user raise HTTPException ( status_code = 400 , detail = \"The user doesn't have enough privileges\" ) def __call__ ( self , user : models . User = Depends ( get_current_user )): return self . check_access ( current_user = user ) \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0442\u043e\u043a\u0435\u043d. \u041d\u0430 24-\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0435\u0441\u0442\u044c \u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441 \u0442\u0430\u043a\u0438\u043c id \u0438 \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c, \u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0435\u0433\u043e. \u041f\u0440\u0438\u043c\u0435\u0440 \u043a\u043e\u0434\u0430 crud \u043d\u0435 \u043f\u0440\u0438\u0432\u043e\u0436\u0443, \u0442\u0430\u043a \u043a\u0430\u043a \u0443 \u0432\u0430\u0441 \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u0441\u0432\u043e\u0439. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0442\u043e\u043a\u0435\u043d \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. myapp/permissions.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 import jwt from fastapi.security import OAuth2PasswordBearer from fastapi import Depends , HTTPException , Security from starlette.status import HTTP_403_FORBIDDEN from myapp.user import models , crud , schemas SECRET_KEY = \"udfsdu6%$&(*Y9dHG(&ytdf987gFST*Sg897\" ALGORITHM = \"HS256\" reusable_oauth2 = OAuth2PasswordBearer ( tokenUrl = \"/api/v1/login/access-token\" ) def get_current_user ( token : str = Security ( reusable_oauth2 )): try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) token_data = schemas . TokenPayload ( ** payload ) except jwt . PyJWTError : raise HTTPException ( status_code = HTTP_403_FORBIDDEN , detail = \"Could not validate credentials\" ) if user := crud . user . get ( id = token_data . user_id ): raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return user class PermissionsRouter : def __init__ ( self , permissions : tuple ): self . permissions = permissions def check_access ( self , current_user : models . User ): for permission in current_user . permissions : if permission . code_name in self . permissions : return current_user raise HTTPException ( status_code = 400 , detail = \"The user doesn't have enough privileges\" ) def __call__ ( self , user : models . User = Depends ( get_current_user )): return self . check_access ( current_user = user ) \u0417\u0430\u0442\u0435\u043c \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043a\u043b\u0430\u0441\u0441 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u043a\u0430\u043a \u0444\u0443\u043d\u043a\u0446\u0438\u044f. \u0412 \u043d\u0435\u0433\u043e \u0431\u0443\u0434\u0435\u043c \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a (\u043a\u043e\u0440\u0442\u0435\u0436) permissions \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u044b. \u0412 \u043c\u0435\u0442\u043e\u0434\u0435 call \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Depends \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0447\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0435\u0433\u043e \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044e. \u0417\u0430\u0442\u0435\u043c \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u043c \u043c\u0435\u0442\u043e\u0434 check_access \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043f\u0440\u0430\u0432. \u0412 \u043c\u0435\u0442\u043e\u0434\u0435 check_access() \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e\u0431\u044b \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u0438\u043d permission \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432\u0445\u043e\u0434\u0438\u043b \u0432 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043d\u044b\u0445 permissions . \u0418 \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u044f, \u0442\u043e \u0432\u0435\u0440\u043d\u0435\u043c \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u044e\u0437\u0435\u0440\u0430. Note \u0412 \u043c\u0435\u0442\u043e\u0434\u0435 check_access() \u043c\u043e\u0436\u0435\u0442 (\u0434\u043e\u043b\u0436\u043d\u0430) \u0431\u044b\u0442\u044c \u0432\u0430\u0448\u0430 \u043b\u043e\u0433\u0438\u043a\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043f\u0440\u0430\u0432. Endpoints myapp/api.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 from typing import List from fastapi import APIRouter , Depends from myapp.user import models , schemas , crud , permissions user_router = APIRouter () @user_router . get ( '/me' , response_model = schemas . UserMe ) def user_me ( current_user : models . User = Depends ( permissions . PermissionsRouter (( 0 ,))) ): return current_user @user_router . get ( '/' , response_model = List [ schemas . UserMe ]) def get_all_users ( current_user : models . User = Depends ( permissions . PermissionsRouter (( 0 , 1 ))), skip : int = 0 , limit : int = 100 ): return crud . user . get_multi ( skip = skip , limit = limit ) \u0417\u0434\u0435\u0441\u044c \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c Depends \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u043a\u043b\u0430\u0441\u0441 PermissionsRouter \u0441 \u043d\u0443\u0436\u043d\u044b\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438. \u0422\u0430\u043a \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b. \u0410\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 myapp/api.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 from typing import List from fastapi import APIRouter , Depends from myapp.user import models , schemas , crud , permissions user_router = APIRouter () permission_me = permissions . PermissionsRouter (( 0 ,)) permission_users = permissions . PermissionsRouter (( 0 , 1 )) @user_router . get ( '/me' , response_model = schemas . UserMe ) def user_me ( current_user : models . User = Depends ( permission_me ) ): return current_user @user_router . get ( '/' , response_model = List [ schemas . UserMe ]) def get_all_users ( current_user : models . User = Depends ( permission_users ), skip : int = 0 , limit : int = 100 ): return crud . user . get_multi ( skip = skip , limit = limit ) \u0417\u0434\u0435\u0441\u044c \u043c\u044b \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u0443\u0436\u043d\u044b\u0435 permissions , \u0430 \u0437\u0430\u0442\u0435\u043c \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u0432 Depends . \u0418\u0442\u043e\u0433 \u041f\u0435\u0440\u0432\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0443\u0434\u043e\u0431\u0435\u043d \u043a\u043e\u0433\u0434\u0430 \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0430 endpoints \u0431\u0443\u0434\u0443\u0442 \u0440\u0430\u0437\u043d\u044b\u0435 permissions . \u0412\u0442\u043e\u0440\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442, \u043a\u043e\u0433\u0434\u0430 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c permissions .","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f permissions \u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b Depends"},{"location":"fastapi/depends/permissions/#permissions-fastapi-depends","text":"","title":"\u041a\u0430\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c permissions \u0432 FastAPI \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0432 Depends"},{"location":"fastapi/depends/permissions/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443 \u043f\u0440\u0430\u0432 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e url. \u0414\u0430\u043d\u043d\u044b\u0435 \u043e \u043f\u0440\u0430\u0432\u0430\u0445 \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u0432 \u0411\u0414.","title":"\u0418\u0434\u0435\u044f"},{"location":"fastapi/depends/permissions/#_2","text":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f Depends FastAPI \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c permissions, \u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0440\u0430\u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 orm \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c SqlAlchemy.","title":"\u0417\u0430\u0434\u0430\u0447\u0430"},{"location":"fastapi/depends/permissions/#_3","text":"\u0423 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u0430\u0432. \u041a \u043f\u0440\u0438\u043c\u0435\u0440\u0443 \u043d\u0430 \u0447\u0442\u0435\u043d\u0438\u0435 \u0438 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435. Note \u041a\u043e\u0434 \u0432\u0441\u0435\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043d\u0435 \u0431\u0443\u0434\u0443 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442\u044c, \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0445 \u0447\u0430\u0441\u0442\u0435\u0439 \u0434\u043b\u044f \u0440\u0435\u0448\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u0447\u0438.","title":"\u0420\u0435\u0448\u0435\u043d\u0438\u0435"},{"location":"fastapi/depends/permissions/#_4","text":"\u041e\u043f\u0438\u0448\u0435\u043c \u043c\u043e\u0434\u0435\u043b\u0438 Permission \u0438 User , \u0430 \u0442\u0430\u043a\u0436\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u0443 \u0434\u043b\u044f \u0441\u0432\u044f\u0437\u0438 m2m . myapp/models.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 from sqlalchemy import Column , String , Integer , Boolean , Table , ForeignKey from sqlalchemy.orm import relationship , backref from myapp.db.session import Base class Permission ( Base ): __tablename__ = \"permissions\" id = Column ( Integer , primary_key = True , index = True , unique = True ) name = Column ( String ) code_name = Column ( Integer ) users_permissions = Table ( 'users_permissions' , Base . metadata , Column ( 'id' , Integer , primary_key = True , unique = True ), Column ( 'user_id' , Integer , ForeignKey ( 'users.id' )), Column ( 'permission_id' , Integer , ForeignKey ( 'permissions.id' )) ) class User ( Base ): __tablename__ = \"users\" id = Column ( Integer , primary_key = True , index = True , unique = True ) username = Column ( String , unique = True ) email = Column ( String , unique = True ) password = Column ( String ) is_active = Column ( Boolean , default = False ) is_superuser = Column ( Boolean , default = False ) permissions = relationship ( \"Permission\" , secondary = users_permissions , backref = backref ( 'users_permissions' , lazy = \"dynamic\" ) ) \u0423 \u043a\u0430\u0436\u0434\u043e\u0433\u043e permission \u0435\u0441\u0442\u044c \u0438\u043c\u044f \u0438 \u043a\u043e\u0434. \u041f\u043e \u043a\u043e\u0434\u0443 \u0431\u0443\u0434\u0435\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u043f\u0440\u0430\u0432\u0430 \u044e\u0437\u0435\u0440\u0430. \u0421\u0432\u044f\u0437\u044c \u043c\u0435\u0436\u0434\u0443 User \u0438 Permission \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u044b users_permissions .","title":"\u041c\u043e\u0434\u0435\u043b\u0438"},{"location":"fastapi/depends/permissions/#pydantic-model","text":"myapp/schemas.py 1 2 3 4 5 6 7 8 9 10 11 from pydantic import BaseModel class User ( BaseModel ): id : int username : str email : str class TokenPayload ( BaseModel ): user_id : int \u0422\u0443\u0442 \u043d\u0438\u0447\u0435\u0433\u043e \u0441\u043b\u043e\u0436\u043d\u043e\u0433\u043e. \u041d\u0430\u0448\u0438 pydantic \u043c\u043e\u0434\u0435\u043b\u0438 \u0434\u043b\u044f \u044e\u0437\u0435\u0440\u0430 \u0438 \u0442\u043e\u043a\u0435\u043d\u0430.","title":"Pydantic model"},{"location":"fastapi/depends/permissions/#depends-permission","text":"myapp/permissions.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 import jwt from fastapi.security import OAuth2PasswordBearer from fastapi import Depends , HTTPException , Security from starlette.status import HTTP_403_FORBIDDEN from myapp.user import models , crud , schemas SECRET_KEY = \"udfsdu6%$&(*Y9dHG(&ytdf987gFST*Sg897\" ALGORITHM = \"HS256\" reusable_oauth2 = OAuth2PasswordBearer ( tokenUrl = \"/api/v1/login/access-token\" ) def get_current_user ( token : str = Security ( reusable_oauth2 )): try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) token_data = schemas . TokenPayload ( ** payload ) except jwt . PyJWTError : raise HTTPException ( status_code = HTTP_403_FORBIDDEN , detail = \"Could not validate credentials\" ) if user := crud . user . get ( id = token_data . user_id ): raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return user class PermissionsRouter : def __init__ ( self , permissions : tuple ): self . permissions = permissions def check_access ( self , current_user : models . User ): for permission in current_user . permissions : if permission . code_name in self . permissions : return current_user raise HTTPException ( status_code = 400 , detail = \"The user doesn't have enough privileges\" ) def __call__ ( self , user : models . User = Depends ( get_current_user )): return self . check_access ( current_user = user ) \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0442\u043e\u043a\u0435\u043d. \u041d\u0430 24-\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0435\u0441\u0442\u044c \u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0441 \u0442\u0430\u043a\u0438\u043c id \u0438 \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c, \u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0435\u0433\u043e. \u041f\u0440\u0438\u043c\u0435\u0440 \u043a\u043e\u0434\u0430 crud \u043d\u0435 \u043f\u0440\u0438\u0432\u043e\u0436\u0443, \u0442\u0430\u043a \u043a\u0430\u043a \u0443 \u0432\u0430\u0441 \u043e\u043d \u0431\u0443\u0434\u0435\u0442 \u0441\u0432\u043e\u0439. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0442\u043e\u043a\u0435\u043d \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. myapp/permissions.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 import jwt from fastapi.security import OAuth2PasswordBearer from fastapi import Depends , HTTPException , Security from starlette.status import HTTP_403_FORBIDDEN from myapp.user import models , crud , schemas SECRET_KEY = \"udfsdu6%$&(*Y9dHG(&ytdf987gFST*Sg897\" ALGORITHM = \"HS256\" reusable_oauth2 = OAuth2PasswordBearer ( tokenUrl = \"/api/v1/login/access-token\" ) def get_current_user ( token : str = Security ( reusable_oauth2 )): try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) token_data = schemas . TokenPayload ( ** payload ) except jwt . PyJWTError : raise HTTPException ( status_code = HTTP_403_FORBIDDEN , detail = \"Could not validate credentials\" ) if user := crud . user . get ( id = token_data . user_id ): raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return user class PermissionsRouter : def __init__ ( self , permissions : tuple ): self . permissions = permissions def check_access ( self , current_user : models . User ): for permission in current_user . permissions : if permission . code_name in self . permissions : return current_user raise HTTPException ( status_code = 400 , detail = \"The user doesn't have enough privileges\" ) def __call__ ( self , user : models . User = Depends ( get_current_user )): return self . check_access ( current_user = user ) \u0417\u0430\u0442\u0435\u043c \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043a\u043b\u0430\u0441\u0441 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c\u0441\u044f \u043a\u0430\u043a \u0444\u0443\u043d\u043a\u0446\u0438\u044f. \u0412 \u043d\u0435\u0433\u043e \u0431\u0443\u0434\u0435\u043c \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a (\u043a\u043e\u0440\u0442\u0435\u0436) permissions \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u044b. \u0412 \u043c\u0435\u0442\u043e\u0434\u0435 call \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Depends \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u0447\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u0438\u0442 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0435\u0433\u043e \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044e. \u0417\u0430\u0442\u0435\u043c \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u043c \u043c\u0435\u0442\u043e\u0434 check_access \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043f\u0440\u0430\u0432. \u0412 \u043c\u0435\u0442\u043e\u0434\u0435 check_access() \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e\u0431\u044b \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u0438\u043d permission \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432\u0445\u043e\u0434\u0438\u043b \u0432 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043d\u044b\u0445 permissions . \u0418 \u0435\u0441\u043b\u0438 \u0435\u0441\u0442\u044c \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u044f, \u0442\u043e \u0432\u0435\u0440\u043d\u0435\u043c \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u044e\u0437\u0435\u0440\u0430. Note \u0412 \u043c\u0435\u0442\u043e\u0434\u0435 check_access() \u043c\u043e\u0436\u0435\u0442 (\u0434\u043e\u043b\u0436\u043d\u0430) \u0431\u044b\u0442\u044c \u0432\u0430\u0448\u0430 \u043b\u043e\u0433\u0438\u043a\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438 \u043f\u0440\u0430\u0432.","title":"Depends permission"},{"location":"fastapi/depends/permissions/#endpoints","text":"myapp/api.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 from typing import List from fastapi import APIRouter , Depends from myapp.user import models , schemas , crud , permissions user_router = APIRouter () @user_router . get ( '/me' , response_model = schemas . UserMe ) def user_me ( current_user : models . User = Depends ( permissions . PermissionsRouter (( 0 ,))) ): return current_user @user_router . get ( '/' , response_model = List [ schemas . UserMe ]) def get_all_users ( current_user : models . User = Depends ( permissions . PermissionsRouter (( 0 , 1 ))), skip : int = 0 , limit : int = 100 ): return crud . user . get_multi ( skip = skip , limit = limit ) \u0417\u0434\u0435\u0441\u044c \u043c\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c Depends \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u043a\u043b\u0430\u0441\u0441 PermissionsRouter \u0441 \u043d\u0443\u0436\u043d\u044b\u043c\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438. \u0422\u0430\u043a \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043c\u044b \u043c\u043e\u0436\u0435\u043c \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b.","title":"Endpoints"},{"location":"fastapi/depends/permissions/#_5","text":"myapp/api.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 from typing import List from fastapi import APIRouter , Depends from myapp.user import models , schemas , crud , permissions user_router = APIRouter () permission_me = permissions . PermissionsRouter (( 0 ,)) permission_users = permissions . PermissionsRouter (( 0 , 1 )) @user_router . get ( '/me' , response_model = schemas . UserMe ) def user_me ( current_user : models . User = Depends ( permission_me ) ): return current_user @user_router . get ( '/' , response_model = List [ schemas . UserMe ]) def get_all_users ( current_user : models . User = Depends ( permission_users ), skip : int = 0 , limit : int = 100 ): return crud . user . get_multi ( skip = skip , limit = limit ) \u0417\u0434\u0435\u0441\u044c \u043c\u044b \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u0443\u0436\u043d\u044b\u0435 permissions , \u0430 \u0437\u0430\u0442\u0435\u043c \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u043c \u0432 Depends .","title":"\u0410\u043b\u044c\u0442\u0435\u0440\u043d\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431"},{"location":"fastapi/depends/permissions/#_6","text":"\u041f\u0435\u0440\u0432\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0443\u0434\u043e\u0431\u0435\u043d \u043a\u043e\u0433\u0434\u0430 \u0434\u043b\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0430 endpoints \u0431\u0443\u0434\u0443\u0442 \u0440\u0430\u0437\u043d\u044b\u0435 permissions . \u0412\u0442\u043e\u0440\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442, \u043a\u043e\u0433\u0434\u0430 \u043c\u044b \u0431\u0443\u0434\u0435\u043c \u043f\u0435\u0440\u0435\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c permissions .","title":"\u0418\u0442\u043e\u0433"}]}